
const path = require('path');
const debug = require('debug')('app');
const cors = require('cors');
const favicon = require('serve-favicon');
// const cookieParser = require('cookie-parser');
const bodyParser = require('body-parser');
const compress = require('compression');


const feathers = require('feathers');
const configuration = require('feathers-configuration');
const authentication = require('feathers-authentication');
const hooks = require('feathers-hooks');
const rest = require('feathers-rest');
const socketio = require('feathers-socketio');

const logger = require('./utils/loggerProduction');
const middleware = require('./middleware');
const services = require('./services');

const isProduction = process.env.NODE_ENV.indexOf('prod') !== -1;
debug(`set isProduction ${isProduction}`);

const app = feathers();


app.set('public', path.join(process.cwd(), 'public')) // **********************************
app.set('nedb', path.join(process.cwd(), 'data'))


app //.configure(configuration(path.join(__dirname, '..')))
  .options('*', cors())

  // Log REST requests
  .use(logger.setMorgan())

  // General setup
  .use(cors())
  .use(favicon(path.join(app.get('public'), 'favicon.ico')))
  // .use(cookieParser())
  .use(bodyParser.json())
  .use(bodyParser.urlencoded({ extended: true }))

  // Load app
  .get('/', serveHtmlForEnvironment) // for '/' only

  // Server static files
  .use('/', feathers.static('public'))
  .use('/', feathers.static('public/dist')) // assets generated by webpack

  // Routing for app.  Load app; the client will handle rest of the routing.
  .use('/app', serveHtmlForEnvironment) // for '/app ...'
  .use('/user', serveHtmlForEnvironment) // for '/user ...'

  // Utilities
  .use(compress())

  // Feathers setup fwith REST and socketio support
  .configure(hooks())
  .configure(rest())
  .configure(socketio())
  .configure(services)
  .configure(middleware)
  .configure(authentication);

module.exports = app;

// Helpers

function serveHtmlForEnvironment(req, res) {
  switch (process.env.NODE_ENV) {
    case 'devserver':
      var html = './index-devserver.html';
      break;
    case 'production': // fall through
    case 'development': // fall through
    default:
      html = path.join('.', 'dist', 'index.html');
  }

  res.sendFile(html, { root: path.join(process.cwd(), 'public') });
}

/* do we need this anymore? how do we make it work with Feathersjs' own err handlers?
 .use('/', (req, res, next) => { throw new Error('vvvv'); })
 .use((err, req, res) => {
 console.log(err)
 })

 // error handlers
 if (!isProduction) {
 // development error handler -- will print stacktrace
 app.use((err, req, res) => { // eslint-disable-line no-unused-vars
 logger.verbose(err.message, { tags: 'route' });
 res.status(err.status || 500);
 res.render('error', {
 message: err.message,
 error: err,
 });
 });
 } else {
 // production error handler -- no stacktrace leaked to user
 app.use((err, req, res) => { // eslint-disable-line no-unused-vars
 logger.verbose(err.message, { tags: 'route' });
 res.status(err.status || 500);
 res.render('error', {
 message: err.message,
 error: {},
 });
 });
 }

 */
